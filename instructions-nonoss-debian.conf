[
    {
        "command":"rm -Rf /tmp/cloudstack", 
        "must_work":True
    },
    {
        "command":"rm -Rf ~/.m2", 
        "must_work":True
    },
    {
        "command":"mkdir /tmp/cloudstack", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"wget --no-check-certificate -q https://dist.apache.org/repos/dist/release/cloudstack/KEYS", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"wget --no-check-certificate -q https://dist.apache.org/repos/dist/dev/cloudstack/${version}/apache-cloudstack-${version}-src.tar.bz2", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"wget --no-check-certificate -q https://dist.apache.org/repos/dist/dev/cloudstack/${version}/apache-cloudstack-${version}-src.tar.bz2.asc", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"wget --no-check-certificate -q https://dist.apache.org/repos/dist/dev/cloudstack/${version}/apache-cloudstack-${version}-src.tar.bz2.md5", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"wget --no-check-certificate -q https://dist.apache.org/repos/dist/dev/cloudstack/${version}/apache-cloudstack-${version}-src.tar.bz2.sha", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"gpg --verify apache-cloudstack-${version}-src.tar.bz2.asc", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"gpg --print-md MD5 apache-cloudstack-${version}-src.tar.bz2 | diff - apache-cloudstack-${version}-src.tar.bz2.md5", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"gpg --print-md SHA512 apache-cloudstack-${version}-src.tar.bz2 | diff - apache-cloudstack-${version}-src.tar.bz2.sha", 
        "must_work":True
    },
    {
        "command":"mkdir /tmp/cloudstack/git", 
        "must_work":True
    },
    {
        "command":"mkdir /tmp/cloudstack/tree", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"git clone -q https://git-wip-us.apache.org/repos/asf/cloudstack.git /tmp/cloudstack/git", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/git",
        "command":"git archive --prefix=/tmp/cloudstack/tree/ ${commit-sh} | tar Pxf -", 
        "must_work":False
    },
    {
        "cwd":"/tmp/cloudstack",
        "command":"tar xvfj apache-cloudstack-${version}-src.tar.bz2",
        "must_work":True
    },
    {
        "command":"diff -r /tmp/cloudstack/apache-cloudstack-${version}-src /tmp/cloudstack/tree", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src",
        "command":"mvn --projects='org.apache.cloudstack:cloudstack' org.apache.rat:apache-rat-plugin:0.8:check",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src",
        "command":"mvn -P developer,systemvm clean install", 
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src",
        "command":"mvn -P developer -pl developer,tools/devcloud -Ddeploydb",                       
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://zooi.widodh.nl/cloudstack/build-dep/cloud-iControl.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://zooi.widodh.nl/cloudstack/build-dep/cloud-manageontap.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://zooi.widodh.nl/cloudstack/build-dep/vmware-vim.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://zooi.widodh.nl/cloudstack/build-dep/vmware-vim25.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://zooi.widodh.nl/cloudstack/build-dep/vmware-apputils.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"wget http://community.citrix.com/download/attachments/37847122/cloud-netscaler-jars.zip",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"mv cloud-manageontap.jar manageontap.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"mv vmware-apputils.jar apputils.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"mv vmware-vim.jar vim.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"mv vmware-vim25.jar vim25.jar",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"unzip cloud-netscaler-jars.zip",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src/deps",
        "command":"./install-non-oss.sh",
        "must_work":True
    },
    {
        "cwd":"/tmp/cloudstack/apache-cloudstack-${version}-src",
        "command":"export ACS_BUILD_OPTS='-Dnonoss'; dpkg-buildpackage",
        "must_work":True
    },
    {
        "instructions":"""
You now need to start the CloudStack management server via: mvn -pl :cloud-client-ui jetty:run

Once the management server starts on your local machine, execute the following commands to bring up a basic zone using the devcloud2 VM:

  Deploy DevCloud (make sure mysql-connector-python is installed and that the management server is running)
  $ mvn -P developer -pl tools/devcloud -Ddeploysvr

  Or, if the above does not work, maybe you're running mvn in debug mode using some MAVEN_OPTS, try marvin:
  $ cd tools/devcloud; python ../marvin/marvin/deployDataCenter.py -i devcloud.cfg

The above will deploy a zone with settings defined in tools/devcloud/devcloud.cfg which sets some global settings and will take some time. After this, you should restart management server and destroy any system vms which may have started for the global settings to take effect.

Access web UI: http://localhost:8080/client, and login with admin/password. You can tell if the SSVM has been started by navigating to the Infrastructure page, and clicking on System VMs.  There should be 2 listed, and their status needs to be displayed as \"Started\".

Add a new instance:

* In the first step of \"Add instance\" wizard, select template,
* In step 2, select \"tiny Linux\"
* In step 3, select \"tinyOffering\"
* In step 4, select \"No thanks\"
* Skip step 5 and 6.
* Launch VM

Test other functionality, to suite your tastes (and perhaps using non-DevCloud infrastructure).

        """ 
    },
] 
